// Generated from java-escape by ANTLR 4.11.1
// jshint ignore: start
import antlr4 from 'antlr4';


const serializedATN = [4,0,10,104,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,
4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,1,0,1,0,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,3,4,3,37,8,3,11,3,12,3,38,1,4,1,4,3,4,
43,8,4,1,4,3,4,46,8,4,1,4,1,4,1,5,4,5,51,8,5,11,5,12,5,52,1,5,1,5,1,6,1,
6,5,6,59,8,6,10,6,12,6,62,9,6,1,6,1,6,1,7,1,7,1,8,5,8,69,8,8,10,8,12,8,72,
9,8,1,8,1,8,1,8,1,8,5,8,78,8,8,10,8,12,8,81,9,8,1,8,1,8,3,8,85,8,8,1,8,1,
8,1,9,1,9,1,9,3,9,92,8,9,1,10,3,10,95,8,10,1,10,1,10,4,10,99,8,10,11,10,
12,10,100,1,10,1,10,1,79,0,11,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,
0,21,10,1,0,4,7,0,32,32,42,42,44,44,46,58,64,93,95,95,97,122,2,0,9,9,32,
32,2,0,10,10,13,13,3,0,10,10,13,13,8232,8233,114,0,1,1,0,0,0,0,3,1,0,0,0,
0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,
0,0,17,1,0,0,0,0,21,1,0,0,0,1,23,1,0,0,0,3,25,1,0,0,0,5,33,1,0,0,0,7,36,
1,0,0,0,9,45,1,0,0,0,11,50,1,0,0,0,13,56,1,0,0,0,15,65,1,0,0,0,17,70,1,0,
0,0,19,91,1,0,0,0,21,98,1,0,0,0,23,24,5,35,0,0,24,2,1,0,0,0,25,26,5,105,
0,0,26,27,5,110,0,0,27,28,5,99,0,0,28,29,5,108,0,0,29,30,5,117,0,0,30,31,
5,100,0,0,31,32,5,101,0,0,32,4,1,0,0,0,33,34,5,59,0,0,34,6,1,0,0,0,35,37,
7,0,0,0,36,35,1,0,0,0,37,38,1,0,0,0,38,36,1,0,0,0,38,39,1,0,0,0,39,8,1,0,
0,0,40,42,5,13,0,0,41,43,5,10,0,0,42,41,1,0,0,0,42,43,1,0,0,0,43,46,1,0,
0,0,44,46,5,10,0,0,45,40,1,0,0,0,45,44,1,0,0,0,46,47,1,0,0,0,47,48,6,4,0,
0,48,10,1,0,0,0,49,51,7,1,0,0,50,49,1,0,0,0,51,52,1,0,0,0,52,50,1,0,0,0,
52,53,1,0,0,0,53,54,1,0,0,0,54,55,6,5,0,0,55,12,1,0,0,0,56,60,5,34,0,0,57,
59,8,2,0,0,58,57,1,0,0,0,59,62,1,0,0,0,60,58,1,0,0,0,60,61,1,0,0,0,61,63,
1,0,0,0,62,60,1,0,0,0,63,64,5,34,0,0,64,14,1,0,0,0,65,66,5,61,0,0,66,16,
1,0,0,0,67,69,3,21,10,0,68,67,1,0,0,0,69,72,1,0,0,0,70,68,1,0,0,0,70,71,
1,0,0,0,71,73,1,0,0,0,72,70,1,0,0,0,73,74,5,47,0,0,74,75,5,47,0,0,75,79,
1,0,0,0,76,78,9,0,0,0,77,76,1,0,0,0,78,81,1,0,0,0,79,80,1,0,0,0,79,77,1,
0,0,0,80,84,1,0,0,0,81,79,1,0,0,0,82,85,3,19,9,0,83,85,5,0,0,1,84,82,1,0,
0,0,84,83,1,0,0,0,85,86,1,0,0,0,86,87,6,8,0,0,87,18,1,0,0,0,88,89,5,13,0,
0,89,92,5,10,0,0,90,92,7,3,0,0,91,88,1,0,0,0,91,90,1,0,0,0,92,20,1,0,0,0,
93,95,5,13,0,0,94,93,1,0,0,0,94,95,1,0,0,0,95,96,1,0,0,0,96,99,5,10,0,0,
97,99,7,1,0,0,98,94,1,0,0,0,98,97,1,0,0,0,99,100,1,0,0,0,100,98,1,0,0,0,
100,101,1,0,0,0,101,102,1,0,0,0,102,103,6,10,0,0,103,22,1,0,0,0,13,0,38,
42,45,52,60,70,79,84,91,94,98,100,1,6,0,0];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

export default class XCConfigLexer extends antlr4.Lexer {

    static grammarFileName = "XCConfig.g4";
    static channelNames = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];
	static modeNames = [ "DEFAULT_MODE" ];
	static literalNames = [ null, "'#'", "'include'", "';'", null, null, null, 
                         null, "'='" ];
	static symbolicNames = [ null, null, null, null, "TEXT", "Newline", "Whitespace", 
                          "String", "EQUALS", "SINGLE_LINE_COMMENT", "WS" ];
	static ruleNames = [ "T__0", "T__1", "T__2", "TEXT", "Newline", "Whitespace", 
                      "String", "EQUALS", "SINGLE_LINE_COMMENT", "NEWLINE", 
                      "WS" ];

    constructor(input) {
        super(input)
        this._interp = new antlr4.atn.LexerATNSimulator(this, atn, decisionsToDFA, new antlr4.PredictionContextCache());
    }

    get atn() {
        return atn;
    }
}

XCConfigLexer.EOF = antlr4.Token.EOF;
XCConfigLexer.T__0 = 1;
XCConfigLexer.T__1 = 2;
XCConfigLexer.T__2 = 3;
XCConfigLexer.TEXT = 4;
XCConfigLexer.Newline = 5;
XCConfigLexer.Whitespace = 6;
XCConfigLexer.String = 7;
XCConfigLexer.EQUALS = 8;
XCConfigLexer.SINGLE_LINE_COMMENT = 9;
XCConfigLexer.WS = 10;



